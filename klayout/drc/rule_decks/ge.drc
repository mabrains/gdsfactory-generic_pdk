# ========================================================================
# SPDX-FileCopyrightText: 2023 Mabrains Company
# Licensed under the GNU GENERAL PUBLIC License, Version 3.0 (the "License");
# you may not use this file except in compliance with the License.

#                    GNU GENERAL PUBLIC LICENSE
#                       Version 3, 29 June 2007

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# SPDX-License-Identifier: GPL-3.0
# ========================================================================

#================================================
#---------------------- GE ----------------------
#================================================ 

# Rule ge.w.1: ge minimum width is 0.4µm.
logger.info("Executing rule ge.w.1")
ge_w_1_l1  = ge_layer.width(0.4.um, euclidian)
ge_w_1_l1.output("ge.w.1", "ge.w.1 : ge minimum width : 0.4µm.")
ge_w_1_l1.forget 

# Rule ge.s.1: ge minimum space is 0.4µm.
logger.info("Executing rule ge.s.1")
ge_s_1_l1  = ge_layer.space(0.4.um, euclidian)
ge_s_1_l1.output("ge.s.1", "ge.s.1 : ge minimum space : 0.4µm.")
ge_s_1_l1.forget 

# Rule ge.a.1: ge minimum area is 1.0µm².
logger.info("Executing rule ge.a.1")
ge_a_1_l1  = ge_layer.with_area(nil, 1.0.um)
ge_a_1_l1.output("ge.a.1", "ge.a.1 : ge minimum area : 1.0µm².")
ge_a_1_l1.forget 

# Rule via1.en.1: gen overlap of ge is 0.3µm.
logger.info("Executing rule via1.en.1")
via1_en_1_l1 = ge_layer.enclosed(gen_layer, 0.3.um, euclidian).polygons(0.001.um)
via1_en_1_l2 = ge_layer.not_outside(gen_layer).not(gen_layer)
via1_en_1_l  = via1_en_1_l1.join(via1_en_1_l2)
via1_en_1_l.output("via1.en.1", "via1.en.1 : gen overlap of ge : 0.3µm.")
via1_en_1_l1.forget
via1_en_1_l2.forget
via1_en_1_l.forget

# Rule via1.en.1: gep overlap of ge is 0.3µm.
logger.info("Executing rule via1.en.1")
via1_en_1_l1 = ge_layer.enclosed(gep_layer, 0.3.um, euclidian).polygons(0.001.um)
via1_en_1_l2 = ge_layer.not_outside(gep_layer).not(gep_layer)
via1_en_1_l  = via1_en_1_l1.join(via1_en_1_l2)
via1_en_1_l.output("via1.en.1", "via1.en.1 : gep overlap of ge : 0.3µm.")
via1_en_1_l1.forget
via1_en_1_l2.forget
via1_en_1_l.forget

